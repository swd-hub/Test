<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>出雲市の日出・日入・夜間長</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* 省略せず全スタイルを含めています（前回のCSSと同じ） */
    /* ...（ここに前回のCSSをそのまま貼り付け）... */
  </style>
</head>
<body>
  <h1>出雲市の日出・日入・夜間長</h1>
  <label>開始日:
    <input type="date" id="start-date">
  </label>
  <label>終了日:
    <input type="date" id="end-date">
  </label>
  <button id="btn">取得</button>

  <label id="fileLabel" style="display:none; margin-top: 1em;">
    ローカルCSVを選択:
    <input type="file" id="csvFile" accept=".csv">
  </label>

  <!-- 春分・夏至・秋分・冬至 表 -->
  <div class="seasonal-dates">
    <h2>二至二分の日付（年により日が前後する）</h2>
    <table id="seasonTable">
      <thead>
        <tr>
          <th>名称</th>
          <th>春分</th>
          <th>夏至</th>
          <th>秋分</th>
          <th>冬至</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>日付</td>
          <td>3月20日</td>
          <td>6月21日</td>
          <td>9月22日</td>
          <td>12月21日</td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="flex-area">
    <table id="resultTable">
      <thead>
        <tr>
          <th>日付</th>
          <th>日出（JST）</th>
          <th>日没（JST）</th>
          <th>昼間長</th>
          <th>夜間長</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <div class="chart-container">
      <div id="loadingMessage">
        <div class="spinner"></div>
        読み込み中...
      </div>
      <canvas id="daylightChart"></canvas>
    </div>
  </div>

<script>
  const today = new Date();
  const oneMonthLater = new Date(today);
  oneMonthLater.setMonth(today.getMonth() + 1);

  function toYYYYMMDD(date) {
    const offset = date.getTimezoneOffset();
    const localDate = new Date(date.getTime() - (offset * 60 * 1000));
    return localDate.toISOString().slice(0, 10);
  }

  function normalizeDate(dateStr) {
    const [y, m, d] = dateStr.split("/");
    return `${y}-${m.padStart(2, "0")}-${d.padStart(2, "0")}`;
  }

  function parseJapaneseDuration(text) {
    const h = parseFloat(text.match(/(\d+)時間/)?.[1] || 0);
    const m = parseFloat(text.match(/(\d+)分/)?.[1] || 0);
    const s = parseFloat(text.match(/(\d+)秒/)?.[1] || 0);
    return h + m / 60 + s / 3600;
  }

  document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("start-date").value = toYYYYMMDD(today);
    document.getElementById("end-date").value = toYYYYMMDD(oneMonthLater);
  });

  document.getElementById("btn").addEventListener("click", async () => {
    document.getElementById("loadingMessage").style.display = "flex";
    document.getElementById("fileLabel").style.display = "none";

    const startDateStr = document.getElementById("start-date").value;
    const endDateStr = document.getElementById("end-date").value;

    try {
      const csvText = await fetch("izumo_2025_sun_data.csv").then(res => {
        if (!res.ok) throw new Error("fetch failed");
        return res.text();
      });
      processCSV(csvText, startDateStr, endDateStr);
    } catch (err) {
      document.getElementById("loadingMessage").style.display = "none";
      document.getElementById("fileLabel").style.display = "block";
      console.warn("fetch失敗。ローカルCSVを選択してください。");
    }
  });

  document.getElementById("csvFile").addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      const csvText = reader.result;
      const startDateStr = document.getElementById("start-date").value;
      const endDateStr = document.getElementById("end-date").value;
      processCSV(csvText, startDateStr, endDateStr);
    };
    reader.readAsText(file, "UTF-8");
  });

  function processCSV(csvText, startDateStr, endDateStr) {
    const tableBody = document.querySelector('#resultTable tbody');
    tableBody.innerHTML = "";

    let labels = [];
    let nightHours = [];
    let daylightHours = [];

    const rows = csvText.trim().split("\n").slice(1);
    rows.forEach(row => {
      const cols = row.split(",");
      if (cols.length < 5) return;

      const [rawDate, sunrise, sunset, daylight, night] = cols;
      const date = normalizeDate(rawDate);

      if (date >= startDateStr && date <= endDateStr) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${date}</td>
          <td>${sunrise}</td>
          <td>${sunset}</td>
          <td>${daylight}</td>
          <td>${night}</td>
        `;
        tableBody.appendChild(tr);

        labels.push(date);
        nightHours.push(Number(parseJapaneseDuration(night).toFixed(2)));
        daylightHours.push(Number(parseJapaneseDuration(daylight).toFixed(2)));
      }
    });

    renderChart(labels, daylightHours, nightHours);
    document.getElementById("loadingMessage").style.display = "none";
  }

  function renderChart(labels, daylightHours, nightHours) {
    const canvas = document.getElementById('daylightChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (window.daylightChartObj?.destroy) {
      window.daylightChartObj.destroy();
    }

    window.daylightChartObj = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: '昼間長（時間）',
            data: daylightHours,
            borderColor: '#f5a623',
            backgroundColor: 'rgba(245, 166, 35, 0.13)',
            pointBackgroundColor: '#f5a623',
            pointRadius: 3,
            tension: 0.28
          },
          {
            label: '夜間長（時間）',
            data: nightHours,
            borderColor: '#2976d6',
            backgroundColor: 'rgba(41, 118, 214, 0.13)',
            pointBackgroundColor: '#2976d6',
            pointRadius: 3,
            tension: 0.28
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: true },
          title: {
            display: true,
            text: '昼間長と夜間長の推移',
            font: { size: 20 }
          }
        },
        scales: {
          x: {
            title: { display: true, text: '日付', font: { size: 16 } },
            ticks: { font: { size: 15 } }
          },
          y: {
            title: { display: true, text: '時間（h）', font: { size: 16 } },
            min: 0,
            max: 24,
            ticks: { stepSize: 2, font: { size: 15 } }
          }
        }
      }
    });
  }
</script>
</body>
</html>
