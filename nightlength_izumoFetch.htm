<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>出雲市の日出・日入・夜間長</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://unpkg.com/encoding-japanese@2.2.0/encoding.min.js"></script>
 <style>
/* 画面表示用スタイル */
@media screen {
    .large-content {
        font-size: 24px;
        width: 100%;
    }
}

/* ボタン・タイトルなど共通カラー */
button, #btn {
    background-color: #4CAF50;
    color: white;
    padding: 10px 24px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.05em;
    transition: background 0.2s;
}
button:hover, #btn:hover {
    background-color: #388e3c;
}

h1 {
    background-color: #4CAF50;
    color: white;
    padding: 14px;
    margin-bottom: 1.5em;
    text-align: center;
    border-radius: 6px;
    font-size: 1.6em;
    letter-spacing: 0.05em;
}
h2 {
    padding: 10px;
    text-align: center;
}

label {
    margin-right: 1.2em;
    font-size: 1.08em;
}
input[type="date"] {
    padding: 7px 12px;
    border: 1px solid #b2b2b2;
    border-radius: 4px;
    font-size: 1em;
}

.flex-area {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    margin-top: 2em;
    gap: 2em;
    flex-wrap: wrap;
}

.right-align {
    text-align: right;
}

/* テーブル */
#resultTable {
    min-width: 440px;
    background: #fff;
    border-collapse: collapse;
    box-shadow: 0 2px 8px rgba(0,0,0,0.09);
    font-size: 1.03em;
    border-radius: 6px;
    overflow: hidden;
}
#resultTable th, #resultTable td {
    padding: 0.6em 1.3em;
    border: 1px solid #d0d0e0;
    text-align: center;
}
#resultTable th {
    background: #e3f3e6;
    font-weight: bold;
}

/* 二至二分テーブル */
.seasonal-dates {
  margin: 2em 0;
  text-align: center;
}
#seasonTable {
  margin: 0 auto;
  border-collapse: collapse;
  font-size: 1.05em;
  box-shadow: 0 1px 6px rgba(0,0,0,0.1);
}
#seasonTable th, #seasonTable td {
  padding: 0.6em 1.2em;
  border: 1px solid #d0d0e0;
}
#seasonTable th {
  background-color: #e3f3e6;
  font-weight: bold;
}

/* グラフエリア */
.chart-container {
    width: 1100px;
    height: 750px;
    background: #fff;
    border-radius: 6px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.12);
    padding: 10px 6px 0 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}
#daylightChart {
    width: 100% !important;
    height: 100% !important;
    max-width: 1100px;
    max-height: 600px;
    background: #fff;
    display: block;
    border-radius: 4px;
    box-shadow: 0 1px 4px rgba(0,0,0,0.04);
}

#loadingMessage {
    position: absolute;
    left: 0; top: 0; width: 100%; height: 100%;
    background: rgba(255,255,255,0.8);
    display: none; align-items: center; justify-content: center; z-index: 2;
    font-size: 2em; color: #2976d6;
    font-weight: bold;
    flex-direction: column;
}
#loadingMessage .spinner {
    margin-bottom: 16px;
    width: 48px; height: 48px;
    border: 6px solid #cce0fa;
    border-top: 6px solid #2976d6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}
@keyframes spin {
  100% { transform: rotate(360deg); }
}

/* モバイル対応 */
@media (max-width: 900px) {
    .flex-area {
        flex-direction: column;
        gap: 1.3em;
    }
    .chart-container {
        width: 98vw;
        max-width: 100vw;
        min-width: 260px;
        height: 47vw;
        max-height: 60vw;
    }
    #daylightChart {
        max-width: 100vw;
        max-height: 55vw;
    }
    #resultTable {
        min-width: 0;
        width: 100%;
        font-size: 1em;
    }
}
  </style>
</head>
<body>
  <h1>出雲市の日出・日入・夜間長</h1>
 <br><br>
<label id="fileLabel">CSVファイルを選択: <input type="file" id="csvFile"></label>
  <br><br>
  <!-- 入力を月＋日で分ける -->
<label>開始日: 
  <input type="number" id="start-month" min="1" max="12" value="3"> 月
  <input type="number" id="start-day" min="1" max="31" value="5"> 日
</label>
<br>
<label>終了日: 
  <input type="number" id="end-month" min="1" max="12" value="3"> 月
  <input type="number" id="end-day" min="1" max="31" value="20"> 日
</label>
<button id="btn">実行</button>  
<p id="loadingMessage" style="display:none;">読み込み中...</p>
  


  <div class="flex-area">
    <table id="resultTable" border="1">
      <thead>
        <tr>
          <th>月日</th>
          <th>日出（JST）</th>
          <th>日没（JST）</th>
          <th>昼間長</th>
          <th>夜間長</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <div class="chart-container" style="width:800px; height:500px;">
      <div id="loadingMessage" style="display:none;">読み込み中...</div>
      <canvas id="daylightChart"></canvas>
    </div>
  </div>

<script>
  // "03-05" のように MM-DD 形式へ
  function toMMDD(month, day) {
    return String(month).padStart(2, "0") + "-" + String(day).padStart(2, "0");
  }

  // CSVの日付を "YYYY/MM/DD" → "MM-DD"
  function normalizeDate(dateStr) {
    const [y, m, d] = dateStr.split("/");
    return `${m.padStart(2,"0")}-${d.padStart(2,"0")}`;
  }

  function parseJapaneseDuration(text) {
    const h = parseFloat(text.match(/(\d+)時間/)?.[1] || 0);
    const m = parseFloat(text.match(/(\d+)分/)?.[1] || 0);
    const s = parseFloat(text.match(/(\d+)秒/)?.[1] || 0);
    return h + m / 60 + s / 3600;
  }

  document.getElementById("btn").addEventListener("click", async () => {
    document.getElementById("loadingMessage").style.display = "block";
    document.getElementById("fileLabel").style.display = "none";

    const startDateStr = toMMDD(
      document.getElementById("start-month").value,
      document.getElementById("start-day").value
    );
    const endDateStr = toMMDD(
      document.getElementById("end-month").value,
      document.getElementById("end-day").value
    );

    try {
      const csvText = await fetch("izumo_2025_sun_data.csv").then(res => {
        if (!res.ok) throw new Error("fetch failed");
        return res.text();
      });
      processCSV(csvText, startDateStr, endDateStr);
    } catch (err) {
      document.getElementById("loadingMessage").style.display = "none";
      document.getElementById("fileLabel").style.display = "block";
      console.warn("fetch失敗。ローカルCSVを選択してください。");
    }
  });

  document.getElementById("csvFile").addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      const sjisArray = new Uint8Array(reader.result);
      const utf8Text = Encoding.convert(sjisArray, {to:'UNICODE', from:'SJIS', type:'string'});
      const startDateStr = toMMDD(
        document.getElementById("start-month").value,
        document.getElementById("start-day").value
      );
      const endDateStr = toMMDD(
        document.getElementById("end-month").value,
        document.getElementById("end-day").value
      );
      processCSV(utf8Text, startDateStr, endDateStr);
    };
    reader.readAsArrayBuffer(file);
  });

  function processCSV(csvText, startDateStr, endDateStr) {
    const tableBody = document.querySelector('#resultTable tbody');
    tableBody.innerHTML = "";

    let labels = [];
    let nightHours = [];
    let daylightHours = [];

    const rows = csvText.trim().split("\n").slice(1);
    rows.forEach(row => {
      const cols = row.split(",");
      if (cols.length < 5) return;

      const [rawDate, sunrise, sunset, daylight, night] = cols;
      const date = normalizeDate(rawDate); // "MM-DD"

      if (date >= startDateStr && date <= endDateStr) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${date}</td>
          <td>${sunrise}</td>
          <td>${sunset}</td>
          <td>${daylight}</td>
          <td>${night}</td>
        `;
        tableBody.appendChild(tr);

        labels.push(date);
        nightHours.push(Number(parseJapaneseDuration(night).toFixed(2)));
        daylightHours.push(Number(parseJapaneseDuration(daylight).toFixed(2)));
      }
    });

    renderChart(labels, daylightHours, nightHours);
    document.getElementById("loadingMessage").style.display = "none";
  }

  function renderChart(labels, daylightHours, nightHours) {
    const ctx = document.getElementById('daylightChart').getContext('2d');
    if (window.daylightChartObj?.destroy) window.daylightChartObj.destroy();

    window.daylightChartObj = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: '昼間長（時間）',
            data: daylightHours,
            borderColor: '#f5a623',
            backgroundColor: 'rgba(245,166,35,0.13)',
            pointBackgroundColor: '#f5a623',
            pointRadius: 3,
            tension: 0.28
          },
          {
            label: '夜間長（時間）',
            data: nightHours,
            borderColor: '#2976d6',
            backgroundColor: 'rgba(41,118,214,0.13)',
            pointBackgroundColor: '#2976d6',
            pointRadius: 3,
            tension: 0.28
          }
        ]
      },
      options: {
        responsive: true,
        plugins: {
          title: { display: true, text: '昼間長と夜間長の推移' }
        },
        scales: {
          x: { title: { display: true, text: '月日' } },
          y: { min:0, max:24, ticks:{stepSize:2}, title:{display:true,text:'時間(h)'} }
        }
      }
    });
  }
</script>
</body>
</html>




